# This LAMMPS input script simulates the pouring of granular material into a rectangular box

atom_style  	sphere    #determine the shape of our atoms
boundary 	fm fm fm   #Set the style of boundaries for the global simulation box in each dimension. fm =  non-periodic and fixed and shrink-wrapped with a minimum value
newton  	off   #turns off newtons 3rd law, very cool to say outloud! saves computational power
comm_modify 	vel yes   #do or do not communicate velocity info with ghost atoms 

region          silo cylinder z 0 5 30 -5.0 0   #attempt at making a cylinder
region  	simulation_box block -30 30 -30 30 0 60    #determines the demensions of our box/structure
region  	inject1 block -3 -1 -3 -1 57 59   #inject1, 2 ,3, and 4 are all varibles that hold places that atoms will spawn from
region  	inject2 block -3 1 1 3 57 59
region  	inject3 block 1 3 1 3 57 59
region  	inject4 block 1 3 -3 -1 57 59
create_box 	2 simulation_box   #creates simulation_box in the simulation

neighbor 	0.2 bin #x=skin, y=style # All atom pairs within a neighbor cutoff distance equal to the their force cutoff plus the skin distance
neigh_modify 	delay 0  # parameters that affect the building and use of pairwise neighbor lists

pair_style	granular #sets the style of your pairs
pair_coeff 	* * hooke 15000 500 tangential linear_nohistory 1.0 0.4 damping mass_velocity #sets charateristics about your pairs such as thier force fields or space they occupy

timestep 	0.0001   #sets timestep size
fix  		1 all nve/sphere #tells lammps to update sphere atoms position, velocity, ect every time step
fix  		2 all gravity 10.0 spherical 0.0 -180.0   #sets gravity for all atoms

# wall
fix 		mywall1 all wall/gran/region hooke/history 15000 NULL 500 NULL 0.5 0 region simulation_box 

# printing and visualisation
compute  	rot_kin all erotate/sphere # rotational kinetic energy of the spherical particles
thermo_style 	custom step atoms ke c_rot_kin
thermo  	10000
thermo_modify 	lost ignore norm no # atom number non-constant
compute_modify 	thermo_temp dynamic/dof yes 
dump 		mydmp all atom 1000 dump_j1.lammpstrj

variable 	varloop loop 10000 # loop with 10000 step #defines and determines how many steps are in our loop
label 		loop #start of loop
variable	seed1 equal floor(${varloop}*34512/10000) # use different seed every times
variable	seed2 equal floor(${varloop}*14585/10000) # use different seed every times
variable	seed3 equal floor(${varloop}*25894/10000) # use different seed every times
variable	seed4 equal floor(${varloop}*89541/10000) # use different seed every times
fix  		mypour1 all pour 2000 1 ${seed1} region silo # insert one particle at a time #pours x number of type y atoms at region1, pours over time
fix  		mypour2 all pour 2000 2 ${seed2} region silo # insert one particle at a time
fix  		mypour3 all pour 2000 1 ${seed3} region silo # insert one particle at a time
fix  		mypour4 all pour 2000 2 ${seed4} region silo # insert one particle at a time
run  		500000 # short run after particle insersion
next 		varloop #increases loop by 1
jump 		SELF loop #jumps back to loop label
run  		2000000 # final longer run
